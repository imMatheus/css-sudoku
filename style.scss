@use 'sass:math';

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

h1 {
  font-size: 2rem;
  margin-bottom: 1rem;
}

.center-wrapper {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.close-sidebar {
  display: none;
}

.description-list {
  margin-bottom: 1rem;
}

$square-size: 70px;
$squares-count: 9;

.board {
  border: 4px solid #000;
  display: grid;
  grid-template-columns: repeat($squares-count, 1fr);
  grid-template-rows: repeat($squares-count, 1fr);
  width: $square-size * $squares-count;
  height: $square-size * $squares-count;
}

.square {
  border: 1px solid #000;
  position: relative;
  transition: background-color 150ms;

  // Make inner crossing borders thicker
  // second vertical row
  &:nth-child(9n-6),
  &:nth-child(9n-3) {
    border-right: 4px solid #000;
  }

  // horizontal rows
  &:nth-of-type(19),
  &:nth-of-type(20),
  &:nth-of-type(21),
  &:nth-of-type(22),
  &:nth-of-type(23),
  &:nth-of-type(24),
  &:nth-of-type(25),
  &:nth-of-type(26),
  &:nth-of-type(27),
  &:nth-of-type(46),
  &:nth-of-type(47),
  &:nth-of-type(48),
  &:nth-of-type(49),
  &:nth-of-type(50),
  &:nth-of-type(51),
  &:nth-of-type(52),
  &:nth-of-type(53),
  &:nth-of-type(54) {
    border-bottom: 4px solid #000;
  }

  .sidebar_toggle_label {
    position: absolute;
    inset: 0;
    cursor: pointer;
  }
  .sidebar_toggle_input:checked + .sidebar_toggle_label {
    border: solid 3px #a1a1aa;
  }

  .sidebar_toggle_input {
    display: none;

    &:checked ~ .number_picker_sidebar {
      //   transition: transform 250ms ease-out;
      // transform: translate(0, -50%);
      z-index: 1;
      display: grid;
      animation: sidebar-appear 250ms;
    }
  }

  .number_picker_sidebar {
    position: absolute;
    left: 50%;
    top: -10px;
    background: #18181b;
    color: white;
    grid-template-columns: repeat(5, 1fr);
    transform: translate(-50%, -100%);
    display: none;
    border: 1px solid #27272a;
    animation: sidebar-disappear 250ms;
  }
  &[data-y='1'],
  &[data-y='2'] {
    .number_picker_sidebar {
      top: unset;
      bottom: -10px;
      transform: translate(-50%, 100%);
    }
  }

  @keyframes sidebar-appear {
    from {
      scale: 0.9;
      opacity: 0;
    }
    to {
      scale: 1;
      opacity: 1;
    }
  }

  @keyframes sidebar-disappear {
    from {
      display: grid;
      opacity: 1;
      scale: 1;
    }
    to {
      display: none;
      opacity: 0;
      scale: 0.9;
    }
  }

  .number_picker_label {
    width: 70px;
    height: 70px;
    border: 1px solid #27272a;
    font-size: 3rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 250ms ease-out;

    &:hover {
      background-color: #27272a;
    }
  }
}

@for $i from 1 through $squares-count * $squares-count {
  @for $j from 1 through $squares-count {
    .number_picker_input[data-square-index='#{$i}'][value='#{$j}']:checked
      ~ .square[data-square-index='#{$i}']::before {
      content: '#{$j}';
      position: absolute;
      font-size: 3rem;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

.number_picker_input {
  width: 0;
  height: 0;
  user-select: none;
  opacity: 0;
  position: absolute;
}

@for $i from 1 through $squares-count {
  @for $value from 1 through $squares-count {
    // Check for same value in the same group
    body:has(
      .number_picker_input[value='#{$value}'][data-square-group='#{$i}']:checked
      ~ .number_picker_input[value='#{$value}'][data-square-group='#{$i}']:checked
    )
    .square[data-square-group='#{$i}'],

    // Check for same value on row
    body:has(
      .number_picker_input[value='#{$value}'][data-y='#{$i}']:checked
      ~ .number_picker_input[value='#{$value}'][data-y='#{$i}']:checked
    )
    .square[data-y='#{$i}'],

    // Check for same value on column
    body:has(
      .number_picker_input[value='#{$value}'][data-x='#{$i}']:checked
      ~ .number_picker_input[value='#{$value}'][data-x='#{$i}']:checked
    )
    .square[data-x='#{$i}'] {
      background: rgb(236, 31, 31);
    }
  }
}

$winningSelector: '';

@for $i from 1 through $squares-count {
  @for $value from 1 through $squares-count {
    $winningSelector: #{$winningSelector} +
      ":not(:has(.number_picker_input[value='" +
      $value +
      "'][data-square-group='" +
      $i +
      "']:checked ~ .number_picker_input[value='" +
      $value +
      "'][data-square-group='" +
      $i +
      "']:checked))";
    $winningSelector: #{$winningSelector} +
      ":not(:has(.number_picker_input[value='" +
      $value +
      "'][data-x='" +
      $i +
      "']:checked ~ .number_picker_input[value='" +
      $value +
      "'][data-x='" +
      $i +
      "']:checked))";
    $winningSelector: #{$winningSelector} +
      ":not(:has(.number_picker_input[value='" +
      $value +
      "'][data-y='" +
      $i +
      "']:checked ~ .number_picker_input[value='" +
      $value +
      "'][data-y='" +
      $i +
      "']:checked))";
  }
}

.icon {
  position: absolute;
  animation: fallAnimation infinite linear;
  font-size: 2rem;
  display: none;
  @for $i from 1 through 101 {
    &:nth-child(#{$i}) {
      left: calc(math.random(100) * 1%);
      animation-delay: calc(-1 * math.random(4000) * 1ms);
      animation-duration: calc(math.random(4000) * 1ms);
      animation-timing-function: cubic-bezier(
        math.div(math.random(100), 100),
        math.div(math.random(100), 100),
        math.div(math.random(100), 100),
        math.div(math.random(100), 100)
      );
    }
  }
}

@keyframes fallAnimation {
  from {
    top: 0;
    transform: translateY(-100%);
  }
  to {
    top: 100vh;
    transform: translateY(0%);
  }
}

body#{$winningSelector}:not(:has(.number_picker_input[value='0']:checked))
  .icon {
  display: block;
}
